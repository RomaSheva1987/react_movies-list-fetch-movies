{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAdd","useState","searchValue","setSearchValue","setMovie","isError","setIsError","isLoad","setIsLoad","getImgUrl","url","normalizeMovie","data","imdbID","Title","Plot","Poster","handleSubmit","event","a","preventDefault","query","fetch","then","res","json","catch","Response","Error","movieData","finally","searchHandler","value","onSubmit","htmlFor","type","id","placeholder","classNames","onChange","target","disabled","length","onClick","App","setMovies","some","mov","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2381875.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\n\ninterface Props {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({ onAdd }) => {\n  const [searchValue, setSearchValue] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoad, setIsLoad] = useState(false);\n\n  const getImgUrl = (url: string) => {\n    return url === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : url;\n  };\n\n  const normalizeMovie = (data: MovieData) => {\n    const url = `https://www.imdb.com/title/${data.imdbID}`;\n\n    const newMovie = {\n      title: data.Title,\n      description: data.Plot,\n      imgUrl: getImgUrl(data.Poster),\n      imdbUrl: url,\n      imdbId: data.imdbID,\n    };\n\n    return newMovie;\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoad(true);\n\n    await getMovie(searchValue)\n      .then((movieData) => {\n        if ('imdbID' in movieData) {\n          setMovie(normalizeMovie(movieData));\n        } else {\n          setIsError(true);\n          setMovie(null);\n        }\n      })\n      .finally(() => {\n        setIsLoad(false);\n      });\n  };\n\n  const searchHandler = (value: string) => {\n    setSearchValue(value);\n    setIsError(false);\n  };\n\n  const saveMovie = () => {\n    if (movie) {\n      onAdd(movie);\n      searchHandler('');\n      setMovie(null);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(\n                'input', {\n                  'is-danger': isError,\n                },\n              )}\n              value={searchValue}\n              onChange={(event) => {\n                searchHandler(event.target.value);\n              }}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light', {\n                  'is-loading': isLoad,\n                },\n              )}\n              disabled={!searchValue.length}\n            >\n              {movie ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={saveMovie}\n\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=f4c8151b';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    const isSameMovie = movies.some(mov => mov.imdbId === movie.imdbId);\n\n    if (!isSameMovie) {\n      setMovies((prevMovies) => [...prevMovies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}